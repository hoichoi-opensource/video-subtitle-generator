# Modern Docker Compose - version field is obsolete in Compose v2

services:
  subtitle-generator:
    build:
      context: .
      dockerfile: Dockerfile
    image: video-subtitle-generator:latest
    container_name: video-subtitle-generator
    restart: unless-stopped
    
    environment:
      # Application settings
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - ENV=production
      
      # Google Cloud settings (optional - can use service account file instead)
      # - GOOGLE_APPLICATION_CREDENTIALS=/app/service-account.json
      # - GCP_PROJECT_ID=your-project-id
      
    volumes:
      # Input/Output directories - map to your local directories
      - ./data/input:/data/input:rw
      - ./data/output:/data/output:rw
      - ./data/logs:/data/logs:rw
      - ./data/temp:/data/temp:rw
      - ./data/jobs:/data/jobs:rw
      
      # Configuration and credentials
      - ./data/config:/data/config:ro
      
      # Optional: Mount local development code for hot reload
      # - ./src:/app/src:ro
      
    ports:
      # Web interface port (if implemented)
      - "8080:8080"
      
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 2G
          cpus: '1'
          
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "from src.health_checker import quick_health_check; h=quick_health_check(); exit(0 if h['overall_status'] in ['healthy','warning'] else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Run in interactive mode by default
    stdin_open: true
    tty: true
    
    # Override command examples:
    # command: python main.py --help
    # command: python main.py --video /data/input/video.mp4 --languages eng,hin
    # command: ["python", "main.py", "--batch", "/data/input"]

  # Optional: Add monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: subtitle-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    profiles:
      - monitoring
      
  grafana:
    image: grafana/grafana:latest
    container_name: subtitle-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  prometheus_data:
  grafana_data: